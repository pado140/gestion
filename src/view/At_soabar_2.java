/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import codebar.Barcode;
import codebar.BarcodeFactory;
import codebar.BarcodeType;
import connection.ConnectionDb;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.io.File;
import java.net.URL;
import java.nio.file.Files;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.util.JRLoader;
import view.report.Data;
import view.report.cutpart;
import view.report.sewing;

/**
 *
 * @author Padovano
 */
public class At_soabar_2 extends javax.swing.JInternalFrame {
private final ConnectionDb conn = ConnectionDb.instance();
private DefaultTableModel tbm;
private Vector<Object[]> listedata;
private Map<String , Integer> padprint;
private Vector<String> table_title;
    /**
     * Creates new form Confirm_at_soabar
     */
    public At_soabar_2() {
        initComponents();
        table_title=new Vector<>();
        
        
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        POPUP = new javax.swing.JPopupMenu();
        AT_EMBL = new javax.swing.JMenuItem();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        GRID_DATA = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        po_filter = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        style_filter = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        color_filter = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        size_filter = new javax.swing.JTextField();

        AT_EMBL.setText("jMenuItem1");
        AT_EMBL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AT_EMBLActionPerformed(evt);
            }
        });
        POPUP.add(AT_EMBL);

        setClosable(true);
        setTitle("At soa bar");

        GRID_DATA.setAutoCreateRowSorter(true);
        GRID_DATA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "SEWING TRAVELLER", "PO", "STYLE", "COLOR", "SIZE", "QTY", "SEWING CARD", "SEWING NO", "ACCUM. QTY", "CUSTOMER", "ORDER", "PLAN", "PROTO_ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        GRID_DATA.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        GRID_DATA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                GRID_DATAMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(GRID_DATA);
        if (GRID_DATA.getColumnModel().getColumnCount() > 0) {
            GRID_DATA.getColumnModel().getColumn(9).setMinWidth(0);
            GRID_DATA.getColumnModel().getColumn(9).setMaxWidth(0);
            GRID_DATA.getColumnModel().getColumn(10).setMinWidth(0);
            GRID_DATA.getColumnModel().getColumn(10).setMaxWidth(0);
            GRID_DATA.getColumnModel().getColumn(11).setMinWidth(0);
            GRID_DATA.getColumnModel().getColumn(11).setMaxWidth(0);
            GRID_DATA.getColumnModel().getColumn(12).setMinWidth(0);
            GRID_DATA.getColumnModel().getColumn(12).setMaxWidth(0);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1031, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel2.setText("Po filter:");

        po_filter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                po_filterKeyReleased(evt);
            }
        });

        jLabel3.setText("style filter:");

        style_filter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                style_filterKeyReleased(evt);
            }
        });

        jLabel4.setText("Color filter:");

        color_filter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                color_filterKeyReleased(evt);
            }
        });

        jLabel5.setText("size filter:");

        size_filter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                size_filterKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(po_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(style_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(color_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(size_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(size_filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(color_filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(style_filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(po_filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GRID_DATAMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GRID_DATAMouseReleased
        // TODO add your handling code here:
        if(evt.getButton()==MouseEvent.BUTTON3){
            if(!GRID_DATA.getSelectionModel().isSelectionEmpty())
            POPUP.show(GRID_DATA,evt.getX(),evt.getY());
            else
                JOptionPane.showMessageDialog(this, "Please select a row!", "Warning", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_GRID_DATAMouseReleased

    private int getSew(String order){
        int a=0;
        String requete="select count(*) n from soabar where order_num=?";
        ResultSet rs=conn.select(requete, order);
        try {
            while(rs.next()){
                a=rs.getInt("n");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Ready_to_sew.class.getName()).log(Level.SEVERE, null, ex);
        }
        a=a+1;
        return a;
    }
    
    //AT TOMMOROW
    private void AT_EMBLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AT_EMBLActionPerformed
        // TODO add your handling code here:
        String requete="insert into pad_print(order_num,SEWING_TRAVElLER,stickers,QTY,user_id) values(?,?,?,?,?)";
       
            String requ="update soabar set date_out=getDate() where date_out is null and order_num=?";
            String requete1="insert into tRANSAC(TRANSACT,ITEM,QTY,ACT_TYPE,ACT_NAME,sub_item,[DATE_T],User_id) values ('At Pad print',?,?,1,'Soa Bar'"
                    + ",?,getdate(),?)";
            //conn.Update(requ, 0, sew);
            //if(!conn.Update(requete1, 0, sew,state[0],Principal.user_id))
            //JOptionPane.showMessageDialog(this, conn.getErreur(), "Fatal Error", JOptionPane.ERROR_MESSAGE);
            Object[] data=new Object[8];
        for(int i=0;i<GRID_DATA.getSelectedRowCount();i++){
            int ligne=GRID_DATA.getSelectedRows()[i];
            String sewing=GRID_DATA.getValueAt(ligne, 6).toString().trim();
            String stickers=sewing+GRID_DATA.getValueAt(ligne, 7).toString().trim();
            String s_travel=GRID_DATA.getValueAt(ligne, 0).toString().trim();
            Object qty=GRID_DATA.getValueAt(ligne, 5);
            data[0]=GRID_DATA.getValueAt(ligne, 0);
                data[1]=GRID_DATA.getValueAt(ligne, 1);
                data[2]=GRID_DATA.getValueAt(ligne, 2);
                data[3]=GRID_DATA.getValueAt(ligne, 3);
                data[4]=GRID_DATA.getValueAt(ligne, 4);
                data[5]=GRID_DATA.getValueAt(ligne, 5);
                data[6]=GRID_DATA.getValueAt(ligne, 6);
                data[7]=GRID_DATA.getValueAt(ligne, 7);
                
                String color=data[3].toString().trim();
                
            print(color.split("-")[1],color.split("-")[0],data[4].toString().trim(),
                         Integer.parseInt(data[5].toString()),stickers,data[1].toString().trim(),data[2].toString().trim(),GRID_DATA.getValueAt(ligne, 7).toString()
                         ,Integer.parseInt(GRID_DATA.getValueAt(ligne, 8).toString()),GRID_DATA.getValueAt(ligne, 9).toString(),Integer.parseInt(GRID_DATA.getValueAt(ligne, 10).toString()),
                         Integer.parseInt(GRID_DATA.getValueAt(ligne, 11).toString()),Integer.parseInt(GRID_DATA.getValueAt(ligne, 12).toString()),sewing,s_travel);
                /*if(!conn.Update(requete, 0, sewing,s_travel,stickers,qty,Principal.user_id))
                JOptionPane.showMessageDialog(this, conn.getErreur(), "Fatal Error", JOptionPane.ERROR_MESSAGE);
                else{
                conn.Update(requ, 0, sewing);
                if(!conn.Update(requete1, 0, sewing,qty,stickers,Principal.user_id))
                JOptionPane.showMessageDialog(this, conn.getErreur(), "Fatal Error", JOptionPane.ERROR_MESSAGE);
                
                
                }*/
        
        }
        
        mostrarData();
        recherche();
    }//GEN-LAST:event_AT_EMBLActionPerformed

    private void po_filterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_po_filterKeyReleased
        // TODO add your handling code here:
        recherche();
    }//GEN-LAST:event_po_filterKeyReleased

    private void style_filterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_style_filterKeyReleased
        // TODO add your handling code here:
        recherche();
    }//GEN-LAST:event_style_filterKeyReleased

    private void color_filterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_color_filterKeyReleased
        // TODO add your handling code here:
        recherche();
    }//GEN-LAST:event_color_filterKeyReleased

    private void size_filterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_size_filterKeyReleased
        // TODO add your handling code here:
        recherche();
    }//GEN-LAST:event_size_filterKeyReleased

    private void get(String sew){
    Object[] state=state(sew);
    boolean valid=true;
    if(Integer.parseInt(state[0].toString())<0){
        System.out.println(state);
        JOptionPane.showMessageDialog(this, "this sticker is not valid or blank");
        valid=false;
    }else if(Integer.parseInt(state[0].toString())==0){
        JOptionPane.showMessageDialog(this, "this travel card is already transfer to pad print");
        valid=false;
    }
    if(valid){
        String requete="insert into pad_print(order_num,SEWING_TRAVElLER,stickers,QTY,user_id) values(?,?,?,?,?)";
        if(!conn.Update(requete, 0, sew,state[1],sew,state[0],Principal.user_id))
            JOptionPane.showMessageDialog(this, conn.getErreur(), "Fatal Error", JOptionPane.ERROR_MESSAGE);
        else{
            String requ="update soabar set date_out=getDate() where date_out is not null and order_num=?";
            String requete1="insert into tRANSAC(TRANSACT,ITEM,QTY,ACT_TYPE,ACT_NAME,[DATE_T],User_id) values ('At Pad print',?,?,1,'Soa Bar'"
                    + ",getdate(),?)";
            conn.Update(requ, 0, sew);
            if(!conn.Update(requete1, 0, sew,state[0],Principal.user_id))
            JOptionPane.showMessageDialog(this, conn.getErreur(), "Fatal Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
}
    
    private void init(){ 
        table_title.add("SEWING TRAVELLER");
        table_title.add("PO");
        table_title.add("STYLE");
        table_title.add("COLOR");
        table_title.add("SIZE");
        table_title.add("QTY");
        table_title.add("SEWING CARD");
        table_title.add("SEWING NO");
        table_title.add("ACCUM. QTY");
        table_title.add("CUSTOMER");
        table_title.add("ORDER");
        table_title.add("PLAN");
        table_title.add("PROTO_ID");
        GRID_DATA.getTableHeader().setFont( new Font( "Arial" , Font.BOLD, 13 ));
        tbm = (DefaultTableModel) GRID_DATA.getModel();
        AT_EMBL.setText("Transfer to padprint");
        //GRID_DATA.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
       mostrarData();
    }
    
    private Object[] state(String sewing){
        String query = "SELECT * from at_soabar where order_num=?";
        ResultSet rs = conn.select(query,sewing);
        boolean check=false;
        int val=0;
        String sewg="";
        try {
        while (rs.next()){
            val=rs.getInt("qty");
            sewg=rs.getString("sewing_traveller");
            int pad=0;
               try{
                   String order=rs.getString("po").trim();
                order+="."+rs.getString("sku").trim();
                   pad=padprint.get(order);
               }catch(NullPointerException e){
                   pad=0;
               }
               val-=pad;
            if(val<=0)
                return new Object[]{-1,sewg};
            
        }
    } catch (SQLException ex) {
        Logger.getLogger(At_soabar.class.getName()).log(Level.SEVERE, null, ex);
    }
        return new Object[]{val,sewg};
    }
    private Map<String ,Integer> padprint(){
        String requete="Select po,sku, sum(qty) qty from At_padprint group by po,sku";
        padprint=new HashMap<>();
        ResultSet rs=conn.select(requete);
        try {
            while(rs.next()){
                String order=rs.getString("po").trim();
                order+="."+rs.getString("sku").trim();
                padprint.put(order, rs.getInt("qty"));
                       
            }
        } catch (SQLException ex) {
               //Logger.getLogger(Cansew.class.getName()).log(Level.SEVERE, null, ex);
           }
        return padprint;
    }
    
    private void recherche(){
        tbm.setRowCount(0);
        String po=po_filter.getText().trim().toLowerCase();
        String style=style_filter.getText().trim().toLowerCase();
        String color=color_filter.getText().trim().toLowerCase();
        String size=size_filter.getText().trim().toLowerCase();
        for(Object[] o:listedata){
            if(o[1].toString().trim().toLowerCase().contains(po)&&o[2].toString().trim().toLowerCase().contains(style)
                    &&o[3].toString().trim().toLowerCase().contains(color)
                    &&o[4].toString().trim().toLowerCase().contains(size))
                tbm.addRow(o);
        }
    }
    
    private Map<String ,Integer[]> at_pad(){
        String requete="Select po,sku, qty,nb  from pad_printed";
        Map<String,Integer[]> sew=new HashMap<>();
        ResultSet rs=conn.select(requete);
        System.out.println("ok");
        try {
            while(rs.next()){
                String order=rs.getString("po").trim();
                order+="."+rs.getString("sku").trim();
                sew.put(order, new Integer[]{rs.getInt("qty"),rs.getInt("nb")});
                       
            }
        } catch (SQLException ex) {
               //Logger.getLogger(Cansew.class.getName()).log(Level.SEVERE, null, ex);
           }
        return sew;
    }
    
    private void mostrarData(){
        //padprint();
        //tbm.setRowCount(0);
        listedata=new Vector<>();
        Map<String ,Integer[]> padprinted=at_pad();
         String query = "SELECT * from at_soabar ";
            ResultSet rs = conn.select(query);
               
    try {
        while (rs.next()){
            if(!rs.getString("status").equals("5")){
            String color,Code;
            
               Code=rs.getString("color_code").trim();
               color=Code+"-"+rs.getString("color").trim();
               int pad=0,acc=0,nb=0;
               try{
                   String order=rs.getString("po").trim();
                order+="."+rs.getString("sku").trim();
                   nb=padprinted.get(order)[1];
                   acc=padprinted.get(order)[0];
                   
               }catch(NullPointerException e){
                   nb=0;
                   acc=0;
               }
               //System.out.println("nb="+nb+", acc="+acc);
               /*try{
               String order=rs.getString("po").trim();
               order+="."+rs.getString("sku").trim();
               pad=padprint.get(order);
               }catch(NullPointerException e){
               pad=0;
               }*/
               
               if(rs.getInt("qty")-acc>0){
                   System.out.println("nb="+nb+", acc="+acc);
                   Object[] data=new Object[13];
                   data[0]=rs.getString("sewing_traveller").trim();
                   data[1]=rs.getString("po").trim();
                   data[2]=rs.getString("style").trim();
                   data[3]=color;
                   data[4]=rs.getString("size").trim();
                   data[5]=rs.getInt("qty")-acc;
                   data[6]=rs.getString("order_num").trim();
                   data[7]=nb+1;
                   data[8]=rs.getInt("qty");
                   data[9]=rs.getString("brand");
                   data[10]=rs.getInt("pieces");
                   data[11]=rs.getInt("planned");
                   data[12]=rs.getInt("proto_id");
                   listedata.add(data);
                   //tbm.addRow(data);
               }
               }
        }
    } catch (SQLException ex) {
        Logger.getLogger(At_soabar.class.getName()).log(Level.SEVERE, null, ex);
    }
    GRID_DATA.setModel(new DefaultTableModel(listedata,table_title));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AT_EMBL;
    private javax.swing.JTable GRID_DATA;
    private javax.swing.JPopupMenu POPUP;
    private javax.swing.JTextField color_filter;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField po_filter;
    private javax.swing.JTextField size_filter;
    private javax.swing.JTextField style_filter;
    // End of variables declaration//GEN-END:variables

    private void print(String color,String color_code,String size,int qty,String code,String pot,String stylet,String no,int cum,String client,int order,int plan,int proto_id,String sewing,String s_travel){
        ArrayList<Data> listdata=new ArrayList<>();
        String requete="insert into pad_print(order_num,SEWING_TRAVElLER,stickers,QTY,user_id) values(?,?,?,?,?)";
       
            String requ="update soabar set date_out=getDate() where date_out is null and order_num=?";
            String requete1="insert into tRANSAC(TRANSACT,ITEM,QTY,ACT_TYPE,ACT_NAME,sub_item,[DATE_T],User_id) values ('At Pad print',?,?,1,'Soa Bar'"
                    + ",?,getdate(),?)";         
        
        if(client.trim().equals("EDG")){
            pot+="("+cut(code.trim().substring(0, code.trim().length()-1))+")";
        }
        Data d=new Data();
                  d.setSize(size);
                  d.setCode(code);
                  d.setQty(qty);
                  listdata.add(d);
                  Barcode b=BarcodeFactory.createBarcode(BarcodeType.Code128,code);
        b.export("jpg", 1, 50 ,true, "P:\\new travel card/barcode/"+code+".jpg");
        //}
        try{ 
            URL  master= this.getClass().getResource("report/newReport.jasper");
            //File r=new File(getClass().getResource("report/newReport.jrxml").getFile());
            //File source = new File("report/newReport.jrxml");
            //JasperDesign jasperDesign=JRXmlLoader.load(getClass().getResourceAsStream("report/newReport.jrxml"));
            //System.out.println("file:"+r.getCanonicalPath());
            
            String po_sku=pot+"."+stylet+"."+color_code+"."+size+"."+qty;
            String sku=stylet+"."+color_code+"."+size;
                  Map param = new HashMap();
                  param.put("client",client);
                  param.put("total_qty",cum);
                  param.put("COLOR",color);
                  param.put("COL",color_code);
                  param.put("order_qty",order);
                  param.put("sewing_no",no);
                  param.put("codes",code);
                  param.put("posku",po_sku);
                  param.put("issued_qty",plan);
                  param.put("qtity",qty);
                  param.put("PO",pot);
                  param.put("sku",sku);
                  System.out.println(listcut(proto_id));
                  ArrayList<cutpart> da=listcut(proto_id);
                  for(int i=0;i<da.size();i++)
                      System.out.println("da:"+da.get(i).getPart());
                  //JasperReport jasperReport = JasperCompileManager.compileReport(r.getAbsolutePath());
                  JasperReport jasperReport = (JasperReport) JRLoader.loadObject(master);
                  //JRBeanCollectionDataSource beanColDataSource =new JRBeanCollectionDataSource(listdata);
                  JRBeanCollectionDataSource beanCutDataSource =new JRBeanCollectionDataSource(da);
                  //param.put("cutData",beanCutDataSource);
                  //String report=JasperFillManager.fillReportToFile(source.getAbsolutePath(),param,beanColDataSource);
                  JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport,param,beanCutDataSource);
                  //JasperViewer.viewReport(jasperPrint);
                  if(Files.exists(new File("P:\\new travel card/").toPath())){
                      b.export("jpg", 1, 50 ,true, "P:\\new travel card/barcode/"+code+".jpg");
                JasperExportManager.exportReportToPdfFile(jasperPrint, "P:\\new travel card/"+code+"-"+no+"("+pot+"."+stylet+"."+color_code+"."+size+").pdf");
                      
                  
                  Desktop dsk=Desktop.getDesktop();
                  dsk.open(new File("P:\\new travel card/"+code+"-"+no+"("+pot+"."+stylet+"."+color_code+"."+size+").pdf"));
                
                
                  
                  
                  //dsk.print(new File("P:\\new travel card/"+code+"-"+no+".pdf"));
                 }else{
                      
                      JOptionPane.showMessageDialog(this, "please make sure that you can connect with the drive P:");
                      
                      if(!Files.exists(new File(System.getProperty("user.home").concat("/Documents/new travel card")).toPath())){
                          File f=new File(System.getProperty("user.home").concat("/Documents/new travel card/barcode"));
                          //f.createNewFile();
                          f.mkdirs();
                          //Files.createDirectory(new File(System.getProperty("user.home").concat("/Documents/new travel card/barcode")).toPath()); 
                      }
                      b.export("jpg", 1, 50 ,true, System.getProperty("user.home").concat("/Documents/new travel card").concat("/barcode/"+code+".jpg"));
                      JasperExportManager.exportReportToPdfFile(jasperPrint, System.getProperty("user.home").concat("/Documents/new travel card/")+code+"-"+no+"("+pot+"."+stylet+"."+color_code+"."+size+").pdf");
                  
                  Desktop dsk=Desktop.getDesktop();
                  dsk.open(new File(System.getProperty("user.home").concat("/Documents/new travel card/")+code+"-"+no+"("+pot+"."+stylet+"."+color_code+"."+size+").pdf"));
                  }
                  if(!conn.Update(requete, 0, sewing,s_travel,code,qty,Principal.user_id))
                JOptionPane.showMessageDialog(this, conn.getErreur(), "Fatal Error", JOptionPane.ERROR_MESSAGE);
                else{
                conn.Update(requ, 0, sewing);
                if(!conn.Update(requete1, 0, sewing,qty,code,Principal.user_id))
                    JOptionPane.showMessageDialog(this, conn.getErreur(), "Fatal Error", JOptionPane.ERROR_MESSAGE);
                  }
                  //dsk.
                  //jviewer.setFitPageZoomRatio();
                  /*if(report!=null){
                  JasperExportManager.exportReportToPdfFile(report,
                  "C://users/Padovano/Desktop/sample_report.pdf");
                  }*/
 
                }
 
                catch (Exception e)
                 {
                     e.printStackTrace();
                     System.out.println("Mensaje de Error:"+e.getMessage());
                     JOptionPane.showMessageDialog(this, e.getMessage());
                     
                     //JOptionPane.showMessageDialog(this, e.());
                 }
    }
    
    private ArrayList<cutpart> listcut(int proto_id){
        String requete="select * from cut_parts where proto_id=?";
        System.out.println(proto_id);
        ArrayList<cutpart> cut=new ArrayList<>();
        ResultSet rs = conn.select(requete,proto_id);
        
        
        try {
            rs.last();
            if(rs.getRow()>0){
                rs.beforeFirst();
        while (rs.next()){
            cutpart c=new cutpart();
            c.setPart(rs.getString("part"));
            c.setQty(rs.getString("qty"));
            cut.add(c);
        }}
            else{
                cutpart c=new cutpart();
            c.setPart("N/A");
            c.setQty("N/A");
            cut.add(c);
            }
    } catch (SQLException ex) {
        Logger.getLogger(sewing.class.getName()).log(Level.SEVERE, null, ex);
    }
        return cut;
    }
    
    private String cut(String code){
        String requete= "select [cut no] cut from orderplan where ordnum_147=?";
        ResultSet rs=conn.select(requete, code);
        System.out.println("cut:"+requete+"'"+code+"'");
        try {
            while(rs.next()){
                return rs.getString("cut").trim();
            }
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(Ready_to_sew.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "";
    }
}
