/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import connection.ConnectionDb;
import java.awt.Font;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import observateurs.Observateurs;
import observateurs.Observe;

/**
 *
 * @author Padovano
 */
public class Heat_pad_old1 extends javax.swing.JInternalFrame implements Observe{
private final ConnectionDb conn = ConnectionDb.instance();
private DefaultTableModel tbm;
private Set<Object[]> listeData;
    /**
     * Creates new form Confirm_at_soabar
     */
    public Heat_pad_old1() {
        initComponents();
        init();
        observa=new Confirm_Receiver(null,false);
    this.ajouterObservateur(observa);
    }
    
        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popup = new javax.swing.JPopupMenu();
        to_embel = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        po_filter = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        style_filter = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        color_filter = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        size_filter = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        GRID_DATA = new javax.swing.JTable();

        to_embel.setText("jMenuItem1");
        popup.add(to_embel);

        setClosable(true);
        setTitle("At Embelisment");

        jLabel2.setText("Po filter:");

        po_filter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                po_filterKeyReleased(evt);
            }
        });

        jLabel3.setText("style filter:");

        style_filter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                style_filterKeyReleased(evt);
            }
        });

        jLabel4.setText("Color filter:");

        color_filter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                color_filterKeyReleased(evt);
            }
        });

        jLabel5.setText("size filter:");

        size_filter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                size_filterKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(po_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(style_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(color_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(size_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(size_filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(color_filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(style_filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(po_filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        GRID_DATA.setAutoCreateRowSorter(true);
        GRID_DATA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "SEWING TRAVELLER", "PO", "STYLE", "COLOR CODE", "COLOR", "SIZE", "QTY", "SEWING CARD"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(GRID_DATA);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1031, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void po_filterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_po_filterKeyReleased
        // TODO add your handling code here:
        recherche();
    }//GEN-LAST:event_po_filterKeyReleased

    private void style_filterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_style_filterKeyReleased
        // TODO add your handling code here:
        recherche();
    }//GEN-LAST:event_style_filterKeyReleased

    private void color_filterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_color_filterKeyReleased
        // TODO add your handling code here:
        recherche();
    }//GEN-LAST:event_color_filterKeyReleased

    private void size_filterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_size_filterKeyReleased
        // TODO add your handling code here:
        recherche();
    }//GEN-LAST:event_size_filterKeyReleased

    private void get(String sew){
    String state=state(sew);
    boolean check=false;
    if(!state.isEmpty()){
    if(state.equals("5")){
        JOptionPane.showMessageDialog(this, "this po sku is closed");
    }else{
        Object[] data=new Object[8];
        
        
        for(int i=0;i<GRID_DATA.getRowCount();i++){
            if(GRID_DATA.getValueAt(i, 7).toString().trim().equals(sew)){
                check=true;
                data[0]=GRID_DATA.getValueAt(i, 0);
                data[1]=GRID_DATA.getValueAt(i, 1);
                data[2]=GRID_DATA.getValueAt(i, 2);
                data[3]=GRID_DATA.getValueAt(i, 3);
                data[4]=GRID_DATA.getValueAt(i, 4);
                data[5]=GRID_DATA.getValueAt(i, 5);
                data[6]=GRID_DATA.getValueAt(i, 6);
                data[7]=GRID_DATA.getValueAt(i, 7);
            }
        }
        if(check){
        alerter("Transfer to sew2",data);
        ((JDialog)observa).setModal(true);
        ((JDialog)observa).setVisible(true);
        }else
            JOptionPane.showMessageDialog(this, "this sticker is not valid!\n"
                    + "We cannot deliver anything\n"
                    + "\t- this lot has never been delivered in pad print.\n"
                    + "\t\t or\n "
                    + "\t- we have nothing to deliver for this lot.");
    }
    }
}
    private void init(){
        GRID_DATA.getTableHeader().setFont( new Font( "Arial" , Font.BOLD, 13 ));
        tbm = (DefaultTableModel) GRID_DATA.getModel();
       mostrarData();
    }
    
    private String state(String sewing){
        String query = "SELECT * from shoporder where ordnum_147=?";
        ResultSet rs = conn.select(query,sewing);
        try {
        while (rs.next()){
            return rs.getString("status_147");
        }
    } catch (SQLException ex) {
        Logger.getLogger(At_soabar.class.getName()).log(Level.SEVERE, null, ex);
    }
        return "";
    }
    private Map<String ,Integer> at_sewing(){
        String requete="Select po,sku, qty from At_sewing1";
        Map<String,Integer> sew=new HashMap<>();
        ResultSet rs=conn.select(requete);
        try {
            while(rs.next()){
                String order=rs.getString("po").trim();
                order+="."+rs.getString("sku").trim();
                sew.put(order, rs.getInt("qty"));
                       
            }
        } catch (SQLException ex) {
               //Logger.getLogger(Cansew.class.getName()).log(Level.SEVERE, null, ex);
           }
        return sew;
    }
    private void mostrarData(){
        listeData=new LinkedHashSet<>();
        tbm.setRowCount(0);
        Map<String ,Integer> atSew=at_sewing();
         String query = "SELECT * from at_padprint";
            ResultSet rs = conn.select(query);
               
    try {
        while (rs.next()){
            String color,Code;
            
               Code=rs.getString("color_code").trim();
               color=Code+"-"+rs.getString("color").trim();
             
               int data1=0;
               try{
                   String order=rs.getString("po").trim();
                order+="."+rs.getString("sku").trim();
                
                   data1=atSew.get(order);
               }catch(NullPointerException e){
                   data1=0;
               }
               if(rs.getInt("qty")-data1>0){
                   Object[] data=new Object[8];
                   data[0]=rs.getString("sewing_traveller");
                   data[1]=rs.getString("po");
                   data[2]=rs.getString("style");
                   data[3]=Code;
                   data[4]=color;
                   data[5]=rs.getString("size");
                   data[6]=rs.getInt("qty")-data1;
                   data[7]=rs.getString("order_num");
                   tbm.addRow(data);
                   listeData.add(data);
               }
        }
    } catch (SQLException ex) {
        Logger.getLogger(At_soabar.class.getName()).log(Level.SEVERE, null, ex);
    }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable GRID_DATA;
    private javax.swing.JTextField color_filter;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField po_filter;
    private javax.swing.JPopupMenu popup;
    private javax.swing.JTextField size_filter;
    private javax.swing.JTextField style_filter;
    private javax.swing.JMenuItem to_embel;
    // End of variables declaration//GEN-END:variables
    private Observateurs observa;
    @Override
    public void ajouterObservateur(Observateurs ob) {
        obs.add(ob);
    }

    @Override
    public void retirerObservateur(Observateurs ob) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void alerter(Object... ob) {
        for(Observateurs o:obs)
            o.executer(ob);
    }
    
    private void recherche(){
        tbm.setRowCount(0);
        String po=po_filter.getText().trim().toLowerCase();
        String style=style_filter.getText().trim().toLowerCase();
        String color=color_filter.getText().trim().toLowerCase();
        String size=po_filter.getText().trim().toLowerCase();
        for(Object[] o:listeData){
            if(o[1].toString().trim().toLowerCase().contains(po)&&o[2].toString().trim().toLowerCase().contains(style)
                    &&(o[3].toString().trim().toLowerCase().contains(color)||o[4].toString().trim().toLowerCase().contains(color))
                    &&o[5].toString().trim().toLowerCase().contains(size))
                tbm.addRow(o);
        }
    }
}
