/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package view;

import connection.ConnectionDb;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Duvers
 */
public class Sewing_prod1 extends javax.swing.JInternalFrame {
    private ConnectionDb conn = ConnectionDb.instance();
    /**
     * Creates new form Sewing_prod
     */
    public Sewing_prod1() {
        initComponents();
        mostrar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        grid_sew = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Sewing Production");

        grid_sew.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "PO NUM", "STYLE", "COLOR CODE", "COLOR", "SIZE", "QTY", "TICKET", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(grid_sew);

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });
        jTextField1.setFocusCycleRoot(true);

        jLabel1.setText("Sewing Traveler");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1106, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode()==10){
            System.out.println(evt.getKeyCode()==10);
            //if(!jTextField1.getText().trim().isEmpty())
                get(jTextField1.getText().trim());
                mostrar();
                jTextField1.setText("");
        }
        
    }//GEN-LAST:event_jTextField1KeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable grid_sew;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

private void get(String sew){
    DefaultTableModel tbm = (DefaultTableModel) grid_sew.getModel();
    tbm.setRowCount(0);
    //Pattern p=Pattern.compile("[");
    String requete="select * from sew_prod where Slot=? and mod is not null";
    System.out.println(requete);
    ResultSet rs=conn.select(requete, sew);
    boolean exist=false,used=false, valid=true;
    String sewing_t="",item="",type="first";
    int id=0;
    int qty=0,QTY_CUT=0;
        try {
            while(rs.next()){
                exist=true;
                id=rs.getInt("sew_id");
                if(rs.getInt("status")==1)
                    used=true;
                if(rs.getInt("status")==2)
                    valid=false;
                qty=rs.getInt("QTY_PER_LOT");
                QTY_CUT=rs.getInt("qty_cut");
                sewing_t=rs.getString("S_TRAVELLER").trim();
                item=rs.getString("slot");
            }   } catch (SQLException ex) {
            Logger.getLogger(Sewing_prod.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(exist){
            if(!used){
                if(valid){
                if(qty==0){
                    String option="";
                    do{
                    option=JOptionPane.showInputDialog(this, "please Confirm quantity"
                            + "\n Quantity must inferior or equals to:"+balance(sewing_t), "Confirmation", JOptionPane.WARNING_MESSAGE);
                    }while(option.trim().isEmpty() || Pattern.matches("\\d+",option)==false||Integer.parseInt(option)>balance(sewing_t));
                    System.out.println(option);
                    if(countBlank(sewing_t)>1)
                    setInvalid(last(sewing_t));
                    qty=Integer.parseInt(option);
                    setqty(Integer.parseInt(option),sew);
                    
                }else if(id==last(sewing_t)){
                    System.out.println("okkkk");
                    setInvalid(last(sewing_t)+1);
                    setInvalid(last(sewing_t)+2);
                }
                    System.out.println("last:"+last(sewing_t));
                setSewn(sew);
                String requete1="insert into TRANSAC(TRANSACT,ITEM,QTY,ACT_TYPE,ACT_NAME,SUB_ITEM,QTY_SUBITEM,user_id) values ('sewing',?,?,3,?,?,?,?)";
                    conn.Update(requete1, 0, new Object[]{sewing_t,QTY_CUT,"sewing",item,qty,Principal.user_id});
                }else{
                    JOptionPane.showMessageDialog(this, "This sticker you scan is invalid", "Alert", JOptionPane.ERROR_MESSAGE);
                }
            }
            else
            {
                JOptionPane.showMessageDialog(this, "This sticker you scan is already scanned", "Alert", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(this, "This sticker you scan is not valid", "Alert", JOptionPane.ERROR_MESSAGE);
        }
        
}
    private void mostrar(){
    DefaultTableModel tbm = (DefaultTableModel) grid_sew.getModel();
    tbm.setRowCount(0);
    String requete="select * from sew_prod where Status=1";
    System.out.println(requete);
    ResultSet rs=conn.select(requete);
        try {
            while(rs.next()){
                String sku=rs.getString("sku");
                   String size=sku.substring(sku.lastIndexOf(".")+1).trim();
                   /*if(rs.getString("description").toLowerCase().contains("yth")||
                   rs.getString("description").toLowerCase().contains("youth")||
                   rs.getString("description").toLowerCase().contains("girls"))
                   size="Y"+size;*/
                String color,Code;
               color=rs.getString("color").trim();
               Code=rs.getString("color_code").trim();
             
                   Object[] data=new Object[7];
                   data[0]=rs.getString("po");
                   data[1]=rs.getString("style");
                   data[6]=rs.getString("slot");
                   data[2]=Code;
                   data[3]=color;
                   data[4]=size;
                   data[5]=rs.getString("QTY_PER_LOT");
                  
                   tbm.addRow(data);
            }   } catch (SQLException ex) {
            Logger.getLogger(Sewing_prod.class.getName()).log(Level.SEVERE, null, ex);
        }
}
    
    private boolean setqty(int qty,String sew){
        String requete="update sewing_production set QTY_PER_LOT=? where slot=?";
        return conn.Update(requete, 0, new Object[]{qty,sew});
    }
    
    private int countBlank(String travel){
        String requete="select count(*) nbre from sewing_production where S_TRAVELLER=? and QTY_PER_LOT=0";
        ResultSet rs=conn.select(requete,travel);
        try {
            rs.first();
            return rs.getInt("nbre");
        } catch(SQLException ex) {
            Logger.getLogger(Sewing_prod.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;
    }
    
    private int last(String trave){
        String requete="select max(sew_id-2) sew_id from sewing_production where S_TRAVELLER=? order by sew_id asc";
        ResultSet rs=conn.select(requete,trave);
        int id=0;
        try {
            while(rs.next()){
                id=rs.getInt("sew_id");
                 }   
        } catch (SQLException ex) {
            Logger.getLogger(Sewing_prod.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }
    private boolean setSewn(String sew){
        String requete="update sewing_production set status=1, modified=getdate() where slot=?";
        return conn.Update(requete, 0, new Object[]{sew});
    }
    private boolean setInvalid(int id){
        String requete="update sewing_production set status=2,modified=getdate() where sew_id=?";
        return conn.Update(requete, 0, id);
    }
    private int lastVal(String trave){
        String requete="select sum(QTY_PER_LOT) qty from sewing_production where S_TRAVELLER=? ";
        ResultSet rs=conn.select(requete,trave);
        int id=0;
        try {
            while(rs.next()){
                id=rs.getInt("qty");
                 }   
        } catch (SQLException ex) {
            Logger.getLogger(Sewing_prod.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }
    
    private int entry(String travel){
        String requete="select sum(QTY_PER_LOT) qty from sewing_production where S_TRAVELLER=? and status=? ";
        ResultSet rs=conn.select(requete,travel,1);
        int id=0;
        try {
            while(rs.next()){
                id=rs.getInt("qty");
                 }   
        } catch (SQLException ex) {
            Logger.getLogger(Sewing_prod.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }
    
    private int balance(String trave){
        return lastVal(trave)-entry(trave);
    }
}