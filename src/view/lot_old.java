/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import connection.ConnectionDb;
import java.awt.Font;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import observateurs.Observateurs;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Padovano
 */
public class lot_old extends javax.swing.JDialog implements Observateurs{
    private ConnectionDb conn = ConnectionDb.instance();
    
    
    /**
     * Creates new form lot
     */
    public lot_old(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        

        this.setLocationRelativeTo(parent);
        //setVisible(true);
    }

    private void save(Object[] ob){
        String requete="INSERT INTO sewing_production (S_TRAVELLER,SLOT,QTY_PER_LOT,id_sew,type_sew) VALUES(?,?,?,?,?)";
        conn.Update(requete, 0, ob);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        grid_bundle_t = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        grid_bundle_t.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "PO NUM", "STYLE", "CODE COLOR", "COLOR", "SIZE", "QTY", "BARCODE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(grid_bundle_t);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icon/export.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser file=new JFileChooser("C:/",FileSystemView.getFileSystemView());
        file.setDialogTitle("enregistre le fichier");
        
        file.setFileFilter(new FileNameExtensionFilter("Workbook excel","xlsx","xls"));
        int returnAct=file.showSaveDialog(this);
        if(returnAct==JFileChooser.APPROVE_OPTION){
            XSSFWorkbook wb = new XSSFWorkbook();
        XSSFSheet sheet = wb.createSheet("cutting card");
        
        //Create some data to build the pivot table on
        setCellData(sheet,grid_bundle_t);
        
        FileOutputStream fileOut;
        try {
            fileOut = new FileOutputStream(file.getSelectedFile().getAbsolutePath()+".xlsx");
            wb.write(fileOut);
        fileOut.close();
        wb.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(lot.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(lot.class.getName()).log(Level.SEVERE, null, ex);
        }
            JOptionPane.showMessageDialog(null, "File saved with success");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public void toExcel(JTable table, String file){
        String valeur="";
    try{
        TableModel model = table.getModel();
        FileWriter excel = new FileWriter(file);

        for(int i = 0; i < model.getColumnCount(); i++){
            excel.write(model.getColumnName(i) + "\t");
        }

        excel.write("\n");

        for(int i=0; i< model.getRowCount(); i++) {
            for(int j=0; j < model.getColumnCount(); j++) {
                try{
                    valeur=model.getValueAt(i,j).toString();
                    if(j==model.getColumnCount()-1)
                        valeur="'"+valeur;
                }catch(NullPointerException e){
                    valeur="";
                }
                excel.write(valeur+"\t");
            }
            excel.write("\n");
        }

        excel.close();

    }catch(IOException e){ System.out.println(e); }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(lot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(lot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(lot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(lot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                lot dialog = new lot(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable grid_bundle_t;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void executer(Object... obs) {
        if(obs[0].toString().equals("generate lot")){
            grid_bundle_t.getTableHeader().setFont( new Font( "Arial" , Font.BOLD, 13 ));
               DefaultTableModel tbm = (DefaultTableModel) grid_bundle_t.getModel();
               tbm.setRowCount(0);
            Object[] data=(Object[])obs[1];
            System.out.println(data[5].toString());
            //setVisible(true);
            int line=(int)Math.ceil(Integer.parseInt(data[5].toString())/25);
            if(Integer.parseInt(data[5].toString())%25>5)
                line+=1;
            //line+=2;
            int blank=3;
            if(Integer.parseInt(data[5].toString())>200)
                blank=4;
            if(Integer.parseInt(data[5].toString())>400)
                blank=6;
            int a=0;
            // Object[] dat=new Object[7];
            String type="first";
            for(int i=0;i<line+blank;i++){
               Object dat=null;
               String code="";
                if(i==line-1){
                    if(Integer.parseInt(data[5].toString())%25>5)
                    dat=Integer.parseInt(data[5].toString())%25;
                    else{
                        if(Integer.parseInt(data[5].toString())%25>0)
                            dat=25+Integer.parseInt(data[5].toString())%25;
                        if(Integer.parseInt(data[5].toString())%25==0)
                            dat=25;
                    }
                   
                }else if(i<line-1){
                     dat=25;
                    
                }
                //int A=alpha.
                code+=data[6];
                code+=i+1;
               
                    tbm.addRow(new Object[]{data[0].toString().trim(),data[1],data[2],data[3],data[4],dat,code});
                    int qty=0;
                    try{
                        qty=Integer.parseInt(dat.toString());
                    }catch(NullPointerException e){
                        
                    }
                    String sewtravel=data[0].toString().trim()+"."+data[1].toString().trim()+"."+data[2].toString().trim()+"."+data[4].toString().trim();
                    System.out.println(sewtravel);
                    System.out.println(exists(code));
                    if(qty==0){
                        if(i>=line+(blank-1))
                            type="second";
                    }
                      System.out.println(type);  
                    if(!exists(code))
                    save(new Object[]{sewtravel,code,qty,data[7],type});
                
                        }
            //System.out.println(data[5].toString());
            //
            //int line=Integer.parseInt(obs[1][5].toString());
        }
    }
    public void setCellData(XSSFSheet sheet,JTable table){
        Row row10=sheet.createRow(0);
        for(int j=0;j<table.getColumnCount();j++){
                Cell cells=row10.createCell(j);
                cells.setCellValue(table.getColumnName(j));
            }
        for(int i=0;i<table.getRowCount();i++){
            Row rows=sheet.createRow(1+i);
            Cell cellMar=rows.createCell(0);
            for(int j=0;j<table.getColumnCount();j++){
                Cell cells=rows.createCell(j);
                try{
                cells.setCellValue(table.getValueAt(i, j).toString());
                }catch(NullPointerException e){
                    
                }
            }
                
        }
    }
    
    private boolean exists(String sku){
        String requete="select count(S_TRAVELLER) from sewing_production where SLOT=?";
        ResultSet rs=conn.select(requete, sku);
        
        try {
            rs.first();
            if(rs.getInt(1)>0)
            return true;
        } catch (SQLException ex) {
            Logger.getLogger(lot.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return false;
    }
}
