/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import connection.ConnectionDb;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Padovano
 */
public class Washing extends javax.swing.JInternalFrame {
private ConnectionDb conn = ConnectionDb.instance();
private Map<String,Integer>list_second;
private DefaultTableModel tbm,tbm1;
private String Erreur="";
private JFileChooser file;
    /**
     * Creates new form packing
     */
    public Washing() {
        initComponents();
        
        file=new JFileChooser("C:/",FileSystemView.getFileSystemView());
        file.setDialogTitle("enregistre le fichier");
        file.setFileFilter(new FileNameExtensionFilter("Workbook excel","xlsx","xls"));
        tbm = (DefaultTableModel) GRID_DATA.getModel();
        tbm1 = (DefaultTableModel) Log.getModel();
        mostrar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        GRID_DATA = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Log = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("At Wash");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jLabel1.setText("Scan stickers");

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icon/export.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 161, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        GRID_DATA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Customer", "WORK ORDER", "PO", "SKU", "QTY", "STICKERS", "DATE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(GRID_DATA);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        Log.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "LPN", "STATUS", "MESSAGE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(Log);
        if (Log.getColumnModel().getColumnCount() > 0) {
            Log.getColumnModel().getColumn(0).setMinWidth(200);
            Log.getColumnModel().getColumn(0).setMaxWidth(200);
            Log.getColumnModel().getColumn(1).setMinWidth(100);
            Log.getColumnModel().getColumn(1).setMaxWidth(100);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode()==10){
            System.out.println(evt.getKeyCode()==10);
            if(!jTextField1.getText().trim().isEmpty())
                act();
            jTextField1.setText("");
        }
        
    }//GEN-LAST:event_jTextField1KeyReleased

    public void setCellData(XSSFSheet sheet,JTable table){
        Row row10=sheet.createRow(0);
        for(int j=0;j<table.getColumnCount();j++){
                Cell cells=row10.createCell(j);
                cells.setCellValue(table.getColumnName(j));
            }
        for(int i=0;i<table.getRowCount();i++){
            Row rows=sheet.createRow(1+i);
            Cell cellMar=rows.createCell(0);
            for(int j=0;j<table.getColumnCount();j++){
                Cell cells=rows.createCell(j);
                try{
                cells.setCellValue(table.getValueAt(i, j).toString());
                }catch(NullPointerException e){
                    
                }
            }
                
        }
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        int returnAct=file.showSaveDialog(this);
        if(returnAct==JFileChooser.APPROVE_OPTION){
            XSSFWorkbook wb = new XSSFWorkbook();
            XSSFSheet sheet = wb.createSheet("log");

            //Create some data to build the pivot table on
            setCellData(sheet,Log);

            FileOutputStream fileOut;
            try {
                String name=file.getSelectedFile().getAbsolutePath();
                if(!name.endsWith(".xlsx"))
                name=file.getSelectedFile().getAbsolutePath()+".xlsx";
                System.out.println(name);
                fileOut = new FileOutputStream(name);
                wb.write(fileOut);
                fileOut.close();
                wb.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Bundle.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Bundle.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(null, "File saved with success");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void mostrar(){
    tbm.setRowCount(0);
    tbm1.setRowCount(0);
    String requete="select * from at_wash";
    System.out.println(requete);
    ResultSet rs=conn.select(requete);
        try {
            while(rs.next()){
             
                   Object[] data=new Object[7];
                   data[0]=rs.getString("brand");
                   data[1]=rs.getString("ordernum");
                   data[2]=rs.getString("po");
                   data[3]=rs.getString("sku");
                   data[4]=rs.getInt("qty");
                   data[5]=rs.getString("stickers");
                   data[6]=rs.getDate("created");
                  
                   tbm.addRow(data);
            }   } catch (SQLException ex) {
            Logger.getLogger(Sewing_prod.class.getName()).log(Level.SEVERE, null, ex);
        }
}
    
    
    private int ability(String w_order){
        String requete="select * from process_all where [work_order]=?";
        ResultSet rs=conn.select(requete, w_order);
    try {
        while(rs.next()){
                return rs.getInt("sewn")-rs.getInt("at_wash");
            
        }
    } catch (SQLException ex) {
        Logger.getLogger(Washing.class.getName()).log(Level.SEVERE, null, ex);
    }
        return 0;
    }
    
    private void act(){
                String text=jTextField1.getText().trim();
                T ac=new T(text);
                Thread t=new Thread(ac);
                t.start();
    }
    private boolean get(String cr,String message){
        String requete="select * from washing where stickers  =?";
        ResultSet rs=conn.select(requete,cr);
        boolean exist=false,used=false, valid=true;
        String sku="",worder="",type="",sticker="";
        int qty=0;
    Date dat=new Date();
    int bar=99;
    int id=0;
        boolean check=false;
        try {
            while(rs.next()){
                exist=true;
                type=rs.getString("type");
                id=rs.getInt("id");
                if(rs.getInt("isWash")==1)
                    used=true;
                if(rs.getInt("isWash")==2)
                    valid=false;
                qty=rs.getInt("qty");
                sticker=rs.getString("travel_no");
                worder=rs.getString("ordernum");
            }
        } catch (SQLException ex) {
            Logger.getLogger(packing.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(exist){
            if(!used){
                if(valid){
                    if(qty==0){
                        String option="";
                    do{
                    option=JOptionPane.showInputDialog(this, "please Confirm quantity"
                            + "\n Quantity must inferior or equals to:"+bar, "Confirmation", JOptionPane.WARNING_MESSAGE);
                    }while(option.trim().isEmpty() || Pattern.matches("\\d+",option)==false||Integer.parseInt(option)>bar);
                    System.out.println(option);
                    
                    qty=Integer.parseInt(option);
                    if(this.setqty(qty, cr))
                        this.setInvalid(first(sticker));
                    }
                    if(qty<=ability(worder)){
                        this.setWashing(cr);
                        message="ok";
                        return true;
                    }else{
                        JOptionPane.showInternalMessageDialog(this, "you can't transfer more than sewn qty in wash process");
                        
                    }
                    
                }else{
                message="Sticker is invalid";
                JOptionPane.showInternalMessageDialog(this, "Sticker is invalid");
            }
            }else{
                message="Sticker already scan";
                JOptionPane.showInternalMessageDialog(this, "Sticker already scan");
            }
        }else{
                message="this lot is not abilty to process into Wash";
           JOptionPane.showInternalMessageDialog(this, "this lot is not abilty to process into Wash");
        }
        return false;
    }
    
    private boolean setqty(int qty,String sew){
        String requete="update washing set QTY=? where stickers=?";
        return conn.Update(requete, 0, new Object[]{qty,sew});
    }
     private boolean setWashing(String sew){
        String requete="update washing set isWash=1 where stickers=?";
        return conn.Update(requete, 0, sew);
    }
    private boolean setInvalid(int id){
        String requete="update washing set isWash=2 where id=?";
        return conn.Update(requete, 0, id);
    }
    
    private int first(String trave){
        String requete="select min(id) ID from washing where travel_no=? and isWash=0 and QTY<>0";
        ResultSet rs=conn.select(requete,trave);
        int id=0;
        try {
            while(rs.next()){
                id=rs.getInt("id");
                 }   
        } catch (SQLException ex) {
            Logger.getLogger(Sewing_prod.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable GRID_DATA;
    private javax.swing.JTable Log;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
class T implements Runnable{

    private String text,message;
    private int lineSelected;
    
    public T(String text){
        this.text=text;
        tbm1.addRow(new Object[]{text,"Pending","waiting"});
        message="";
        lineSelected=tbm1.getRowCount()-1;
    }
        @Override
        public void run() {
            tbm1.setValueAt("Running", lineSelected, 1);
            if(get(text,message)){
           
                tbm1.setValueAt("Success", lineSelected, 2);
                tbm1.setValueAt(message, lineSelected, 1);
            }else{
                tbm1.setValueAt("Fail", lineSelected, 2);
               tbm1.setValueAt(message, lineSelected, 1);
               //Log.getColumnModel().getColumn();
            }
           
        }
        
    
}
}

