/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Load_data.GBG;

import connection.ConnectionDb;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import view.Bundle;

/**
 *
 * @author Padovano
 */
public class Transform_file_to_lpn extends javax.swing.JInternalFrame {

    private final ConnectionDb conn=ConnectionDb.instance();
    Set<String> erreur;
    private JFileChooser file;
    /**
     * Creates new form load_gbg_lpn_file
     */
    public Transform_file_to_lpn() {
        initComponents();
        file=new JFileChooser("C:/",FileSystemView.getFileSystemView());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        COUNT = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        grid_data = new javax.swing.JTable();

        setClosable(true);

        jButton1.setText("Load File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icon/export.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("COUNT:");

        COUNT.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(COUNT, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 673, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(COUNT, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton3)
                .addGap(0, 2, Short.MAX_VALUE))
        );

        grid_data.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "PO", "STYLE", "COLOR CODE", "COLOR", "SIZE", "QTY", "lpn", "lpn_mix", "is_mix"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(grid_data);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 921, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        file.setDialogTitle("enregistre le fichier");

        file.setFileFilter(new FileNameExtensionFilter("Workbook excel","xlsx","xls"));
        int returnAct=file.showSaveDialog(this);
        if(returnAct==JFileChooser.APPROVE_OPTION){
            XSSFWorkbook wb = new XSSFWorkbook();
            XSSFSheet sheet = wb.createSheet("lpn");

            //Create some data to build the pivot table on
            setCellData(sheet,grid_data);

            FileOutputStream fileOut;
            try {
                String name=file.getSelectedFile().getAbsolutePath();
                if(!name.endsWith(".xlsx"))
                name=file.getSelectedFile().getAbsolutePath()+".xlsx";
                System.out.println(name);
                fileOut = new FileOutputStream(name);
                wb.write(fileOut);
                fileOut.close();
                wb.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Bundle.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Bundle.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(null, "File saved with success");
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        file.setDialogTitle("Open file");
        file.setMultiSelectionEnabled(true);
        int nline=0;
        file.setFileFilter(new FileNameExtensionFilter("text file","txt","TXT"));
        int returnAct=file.showOpenDialog(this);
        if(returnAct==JFileChooser.APPROVE_OPTION){
            boolean inner=false;
            String Po=null,style;
            Object[][] ob=new Object[10000][10];
            InputStream fileIn;
            Set<Object[]> lis=new HashSet<>();
            String val="";
            try {
                
                String lpn="",pol="",stylel="",coll="",colorl="",size="",qty="";
                int i=0,pos=0,indice=0;
                String po="";
                File[] files=file.getSelectedFiles();
                for(int j=0;j<files.length;j++){
                    System.out.println(files[j].getAbsolutePath());
                    i=0;
                    pos=0;
                fileIn = new FileInputStream(files[j]);
                InputStreamReader rea=new FileReader(files[j]);
                BufferedReader reader=new BufferedReader(rea);
                
                
                String line=null;
                Object[] objet=null;
                int a=0,b=1;
                int total=0;
                while((line=reader.readLine())!=null){
                    i++;
                    
                    if(i==9){
                        po=line.substring(line.indexOf("\"")+1, line.indexOf("/")).trim();
                        System.out.println(line);
                    }
                    if(line.startsWith("{B,")){
                        if(!line.endsWith("}")){
                            a=0;
                            b=1;
                            objet=new Object[10];
                            pos=i;
                            ob[nline][0]=po;
                            objet[0]=po;
                            nline++;
                            System.out.println(line);
                        }
                    }
                    if(pos>0){
                        
                        
                        boolean next=false;
                        boolean mix=false;
                        
                        if(i>pos+2 && i<pos+34){
                            System.out.println("indice:"+line);
//                            int index=0;
//                            if(indice>=35)
//                                index=0;
//                            else
                            
                                int index=4;
                                if(!line.trim().equals("}"))
                                    index=Integer.parseInt(line.substring(0,line.indexOf(",")));
                            indice=index;
                            System.out.println("index:"+index);
                            switch(index){
                                case 3:{
                                    ob[nline-1][7]=line.substring(line.indexOf("\"")+1,line.lastIndexOf("\""));
                                    lpn=line.substring(line.indexOf("\"")+1,line.lastIndexOf("\""));
                                    System.out.println("lpn:"+line.substring(line.indexOf("\"")+1,line.lastIndexOf("\"")));
                                }
                                break;
                                case 5:{
                                    ob[nline-1][1]=line.substring(line.indexOf("\"")+3,line.indexOf("-"));
                                    stylel=line.substring(line.indexOf("\"")+3,line.indexOf("-"));
                                    if(line.substring(line.indexOf("\"")+1,line.lastIndexOf("\"")).split("-").length>2){
                                        ob[nline-1][2]=line.substring(line.indexOf("-")+1,line.lastIndexOf("-"));
                                        coll=line.substring(line.indexOf("-")+1,line.lastIndexOf("-"));
                                    }
                                }
                                break;
                                case 30:
                                    ob[nline-1][3]=line.substring(line.indexOf("\"")+1,line.lastIndexOf("\"")).trim();
                                    colorl=line.substring(line.indexOf("\"")+1,line.lastIndexOf("\"")).trim();
                                    
                                        total=0;
                                    if(a>1){
                                        mix=true;
                                        System.out.println("a="+a);
                                        for(int k=0;k<a;k++){
                                        ob[nline-1-k][3]=colorl;
                                        ob[nline-1-k][6]=lpn+(k+1);
                                        ob[nline-1-k][7]=lpn;
                                        ob[nline-1-k][8]=mix;
                                        total+=Integer.parseInt(ob[nline-1-k][5].toString());
                                        ob[nline-1-k][9]=total;
                                        }
                                        for(int k=0;k<a;k++)
                                            ob[nline-1-k][9]=total*b;
                                    }else{
                                        total=Integer.parseInt(ob[nline-1][5].toString());
                                        
                                        ob[nline-1][9]=total;
                                    }
                                break;
                                case 31:
                                    String packaging=line.substring(line.indexOf("\"")+1,line.lastIndexOf("\"")).trim();
                                    if(!packaging.equals("NON CONFORMING")){
                                    String packaging_type=packaging.substring(0, packaging.indexOf(":"));
                                    
                                    if(packaging.substring(packaging.indexOf(":")+1).trim().equals("INNER PACK")||packaging.substring(packaging.indexOf(":")+1).trim().equals("ASSORT")){
                                        total=Integer.parseInt(ob[nline-1][5].toString());
                                        System.out.println("total:"+total);
                                        inner=true;
                                        if(a>0){
                                            for(int k=0;k<a;k++)
                                                total+=Integer.parseInt(ob[nline-1][5].toString());
                                            
                                        }
                                        nline-=a;
                                        
                                       
                                        
                                        
                                    }
                                    if(packaging_type.equals("CASE")){  
                                        val=String.valueOf(total);
                                        mix=true;
                                        for(int k=0;k<a;k++){
                                        ob[nline-1-k][8]=mix;
                                        ob[nline-1-k][7]=packaging.substring(packaging.indexOf(":")+1).trim();
                                        total=Integer.parseInt(val);
                                        ob[nline-1-k][9]=total*a;
                                        }
                                    }
                                    }else{
                                        if(j==0 && ob.length==0)
                                            nline=0;
                                        else
                                            nline--;
                                    }
                                break;
                                case 7:{
                                    if(!line.substring(line.indexOf("\"")+1,line.lastIndexOf("\"")).trim().contains("-")){
                                        ob[nline-1][4]=line.substring(line.indexOf("\"")+1,10).trim();
                                        size=line.substring(line.indexOf("\"")+1,10).trim();
                                        ob[nline-1][5]=line.substring(line.indexOf("\"")+10,line.lastIndexOf("\"")).trim();
                                        qty=line.substring(line.indexOf("\"")+10,line.lastIndexOf("\"")).trim();
                                        
                                        if(size.split(" ").length>1)
                                            size=size.substring(0, size.length()-3).trim().concat("X").concat(size.substring(size.length()-3).trim());
                                        //next=true;
                                         
                                         
                                        lis.add(new Object[]{po,stylel,coll,colorl,size,qty,null,lpn,mix,total});
                                        a++;
                                        ob[nline-1]=new Object[]{po,stylel,coll,colorl,size,qty,null,lpn,mix,total};
                                    }else{
                                        ob[nline-1][2]=line.substring(line.indexOf("-")+1,line.lastIndexOf("-"));
                                        coll=line.substring(line.indexOf("-")+1,line.lastIndexOf("-"));
                                        next=true;
                                    }
                                }
                                break;
                                case 8:{
                                    if(!line.substring(line.indexOf("\"")+1,10).trim().equals("")){
                                    if(!next){
                                        //ob[nline-1][2]=line.substring(line.indexOf("-")+1,line.lastIndexOf("-"));
                                        //coll=line.substring(line.indexOf("-")+1,line.lastIndexOf("-"));
                                        ob[nline-1][4]=line.substring(line.indexOf("\"")+1,10).trim();
                                        size=line.substring(line.indexOf("\"")+1,10).trim();
                                        ob[nline-1][5]=line.substring(line.indexOf("\"")+10,line.lastIndexOf("\"")).trim();
                                        qty=line.substring(line.indexOf("\"")+10,line.lastIndexOf("\"")).trim();
                                        if(size.split(" ").length>1)
                                            size=size.substring(0, size.length()-3).trim().concat("X").concat(size.substring(size.length()-3).trim());
                                        
                                        ob[nline-1]=new Object[]{po,stylel,coll,colorl,size,qty,null,lpn,mix,total};
                                        lis.add(new Object[]{po,stylel,coll,colorl,size,qty,null,lpn,mix,total});
                                        a++;
                                    }
                                    else{
                                    nline++;
                                    ob[nline-1][2]=line.substring(line.indexOf("-")+1,line.lastIndexOf("-"));
                                    coll=line.substring(line.indexOf("-")+1,line.lastIndexOf("-"));
                                    ob[nline-1][4]=line.substring(line.indexOf("\"")+1,10).trim();
                                    size=line.substring(line.indexOf("\"")+1,10).trim();
                                    
                                    ob[nline-1][5]=line.substring(line.indexOf("\"")+10,line.lastIndexOf("\"")).trim();
                                    qty=line.substring(line.indexOf("\"")+10,line.lastIndexOf("\"")).trim();
                                    if(size.split(" ").length>1)
                                            size=size.substring(0, size.length()-3).trim().concat("X").concat(size.substring(size.length()-3).trim());
                                    
                                    
                                    ob[nline-1]=new Object[]{po,stylel,coll,colorl,size,qty,null,lpn,mix,total};
                                    lis.add(new Object[]{po,stylel,coll,colorl,size,qty,null,lpn,mix,total});
                                    a++;
                                    }
                                    
                                }
                                }
                                break;
                                case 35:
                                    lis.add(new Object[]{po,stylel,coll,colorl,size,qty,null,lpn,mix,total});
                                break;
                                default:
                                {
                                    if(index!=32 && index!=33 && index!=34 && index!=35 && index!=37 && index!=4){
                                        if(!line.substring(line.indexOf("\"")+1,10).trim().equals("")){
                                            System.err.println("really"+line.substring(line.indexOf("\"")+1,line.lastIndexOf("\"")).trim());
                                        nline++;
                                        ob[nline-1][4]=line.substring(line.indexOf("\"")+1,10).trim();
                                        size=line.substring(line.indexOf("\"")+1,10).trim();
                                        ob[nline-1][5]=line.substring(line.indexOf("\"")+10,line.lastIndexOf("\"")).trim();
                                        qty=line.substring(line.indexOf("\"")+10,line.lastIndexOf("\"")).trim();
                                        if(size.split(" ").length>1)
                                            size=size.substring(0, size.length()-3).trim().concat("X").concat(size.substring(size.length()-3).trim());
                                        
                                        ob[nline-1]=new Object[]{po,stylel,coll,colorl,size,qty,null,lpn,mix,total};
                                        lis.add(new Object[]{po,stylel,coll,colorl,size,qty,null,lpn,mix,total});
                                        a++;
                                        }
                                    }
                                }
                                    
                                break;
                            }
                        
                        }
                     //pos=0;   
                    }
                }
                }
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Bundle.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Bundle.class.getName()).log(Level.SEVERE, null, ex);
            }
            grid_data.setModel(new javax.swing.table.DefaultTableModel(
            ob,
            new String [] {
                "PO", "STYLE", "COLOR CODE", "COLOR", "SIZE", "QTY", "POLYBAG LPN", "LPN", "is_mix","qty total"
            }
        ));
        }
        COUNT.setText(String.valueOf(nline));
    }//GEN-LAST:event_jButton1ActionPerformed

    public void setCellData(XSSFSheet sheet,JTable table){
        Row row10=sheet.createRow(0);
        for(int j=0;j<table.getColumnCount();j++){
                Cell cells=row10.createCell(j);
                cells.setCellValue(table.getColumnName(j));
            }
        for(int i=0;i<table.getRowCount();i++){
            Row rows=sheet.createRow(1+i);
            Cell cellMar=rows.createCell(0);
            for(int j=0;j<table.getColumnCount();j++){
                Cell cells=rows.createCell(j);
                try{
                cells.setCellValue(table.getValueAt(i, j).toString());
                }catch(NullPointerException e){
                    
                }
            }
                
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel COUNT;
    private javax.swing.JTable grid_data;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
